/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  CoordinateSystemType,
  DistanceUnitType,
  DrawBarConfig,
  FullScreenConfig,
  GisViewerProps,
  LayerManagerConfig,
  MeasureConfig,
  MiniMapConfig,
  MouseCoordinateConfig,
  ScaleConfig,
  SearchConfig,
  ToolbarConfig,
  ZoomToExtentConfig,
} from './models';
import {
  Control,
  FeatureGroup,
} from 'leaflet';

declare global {

  namespace StencilComponents {
    interface DevComponent {

    }
  }

  interface HTMLDevComponentElement extends StencilComponents.DevComponent, HTMLStencilElement {}

  var HTMLDevComponentElement: {
    prototype: HTMLDevComponentElement;
    new (): HTMLDevComponentElement;
  };
  interface HTMLElementTagNameMap {
    'dev-component': HTMLDevComponentElement;
  }
  interface ElementTagNameMap {
    'dev-component': HTMLDevComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dev-component': JSXElements.DevComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface DevComponentAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GisViewer {
      'changeCoordinateSystem': () => void;
      'changeDistanceUnits': () => void;
      'exportMapImage': () => Promise<any>;
      'getVersion': () => void;
      'gisViewerProps': GisViewerProps;
      'zoomToExtent': () => void;
    }
  }

  interface HTMLGisViewerElement extends StencilComponents.GisViewer, HTMLStencilElement {}

  var HTMLGisViewerElement: {
    prototype: HTMLGisViewerElement;
    new (): HTMLGisViewerElement;
  };
  interface HTMLElementTagNameMap {
    'gis-viewer': HTMLGisViewerElement;
  }
  interface ElementTagNameMap {
    'gis-viewer': HTMLGisViewerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gis-viewer': JSXElements.GisViewerAttributes;
    }
  }
  namespace JSXElements {
    export interface GisViewerAttributes extends HTMLAttributes {
      'gisViewerProps'?: GisViewerProps;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MapContainer {
      'changeCoordinateSystem': (unit?: CoordinateSystemType) => void;
      'changeDistanceUnits': () => void;
      'gisViewerProps': GisViewerProps;
      'zoomToExtent': () => void;
    }
  }

  interface HTMLMapContainerElement extends StencilComponents.MapContainer, HTMLStencilElement {}

  var HTMLMapContainerElement: {
    prototype: HTMLMapContainerElement;
    new (): HTMLMapContainerElement;
  };
  interface HTMLElementTagNameMap {
    'map-container': HTMLMapContainerElement;
  }
  interface ElementTagNameMap {
    'map-container': HTMLMapContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'map-container': JSXElements.MapContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface MapContainerAttributes extends HTMLAttributes {
      'gisViewerProps'?: GisViewerProps;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MiniMapPlugin {
      'config': MiniMapConfig;
      'gisMap': L.Map;
    }
  }

  interface HTMLMiniMapPluginElement extends StencilComponents.MiniMapPlugin, HTMLStencilElement {}

  var HTMLMiniMapPluginElement: {
    prototype: HTMLMiniMapPluginElement;
    new (): HTMLMiniMapPluginElement;
  };
  interface HTMLElementTagNameMap {
    'mini-map-plugin': HTMLMiniMapPluginElement;
  }
  interface ElementTagNameMap {
    'mini-map-plugin': HTMLMiniMapPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mini-map-plugin': JSXElements.MiniMapPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface MiniMapPluginAttributes extends HTMLAttributes {
      'config'?: MiniMapConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MouseCoordinatePlugin {
      'config': MouseCoordinateConfig;
      'gisMap': L.Map;
    }
  }

  interface HTMLMouseCoordinatePluginElement extends StencilComponents.MouseCoordinatePlugin, HTMLStencilElement {}

  var HTMLMouseCoordinatePluginElement: {
    prototype: HTMLMouseCoordinatePluginElement;
    new (): HTMLMouseCoordinatePluginElement;
  };
  interface HTMLElementTagNameMap {
    'mouse-coordinate-plugin': HTMLMouseCoordinatePluginElement;
  }
  interface ElementTagNameMap {
    'mouse-coordinate-plugin': HTMLMouseCoordinatePluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'mouse-coordinate-plugin': JSXElements.MouseCoordinatePluginAttributes;
    }
  }
  namespace JSXElements {
    export interface MouseCoordinatePluginAttributes extends HTMLAttributes {
      'config'?: MouseCoordinateConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScalePlugin {
      'config': ScaleConfig;
      'getControl': () => Control;
      'gisMap': L.Map;
    }
  }

  interface HTMLScalePluginElement extends StencilComponents.ScalePlugin, HTMLStencilElement {}

  var HTMLScalePluginElement: {
    prototype: HTMLScalePluginElement;
    new (): HTMLScalePluginElement;
  };
  interface HTMLElementTagNameMap {
    'scale-plugin': HTMLScalePluginElement;
  }
  interface ElementTagNameMap {
    'scale-plugin': HTMLScalePluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'scale-plugin': JSXElements.ScalePluginAttributes;
    }
  }
  namespace JSXElements {
    export interface ScalePluginAttributes extends HTMLAttributes {
      'config'?: ScaleConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CustomDropDownPlugin {
      'customControlName': string;
      'dropDownData': any[];
      'dropDownTitle': string;
      'getControl': () => Control;
      'gisMap': L.Map;
    }
  }

  interface HTMLCustomDropDownPluginElement extends StencilComponents.CustomDropDownPlugin, HTMLStencilElement {}

  var HTMLCustomDropDownPluginElement: {
    prototype: HTMLCustomDropDownPluginElement;
    new (): HTMLCustomDropDownPluginElement;
  };
  interface HTMLElementTagNameMap {
    'custom-drop-down-plugin': HTMLCustomDropDownPluginElement;
  }
  interface ElementTagNameMap {
    'custom-drop-down-plugin': HTMLCustomDropDownPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'custom-drop-down-plugin': JSXElements.CustomDropDownPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface CustomDropDownPluginAttributes extends HTMLAttributes {
      'customControlName'?: string;
      'dropDownData'?: any[];
      'dropDownTitle'?: string;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CustomExport {
      'getElement': () => HTMLElement;
      'gisMap': L.Map;
    }
  }

  interface HTMLCustomExportElement extends StencilComponents.CustomExport, HTMLStencilElement {}

  var HTMLCustomExportElement: {
    prototype: HTMLCustomExportElement;
    new (): HTMLCustomExportElement;
  };
  interface HTMLElementTagNameMap {
    'custom-export': HTMLCustomExportElement;
  }
  interface ElementTagNameMap {
    'custom-export': HTMLCustomExportElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'custom-export': JSXElements.CustomExportAttributes;
    }
  }
  namespace JSXElements {
    export interface CustomExportAttributes extends HTMLAttributes {
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CustomSettings {
      'getElement': () => HTMLElement;
      'gisMap': L.Map;
    }
  }

  interface HTMLCustomSettingsElement extends StencilComponents.CustomSettings, HTMLStencilElement {}

  var HTMLCustomSettingsElement: {
    prototype: HTMLCustomSettingsElement;
    new (): HTMLCustomSettingsElement;
  };
  interface HTMLElementTagNameMap {
    'custom-settings': HTMLCustomSettingsElement;
  }
  interface ElementTagNameMap {
    'custom-settings': HTMLCustomSettingsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'custom-settings': JSXElements.CustomSettingsAttributes;
    }
  }
  namespace JSXElements {
    export interface CustomSettingsAttributes extends HTMLAttributes {
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DrawBarPlugin {
      'config': DrawBarConfig;
      'getControl': () => Control;
      'gisMap': L.Map;
    }
  }

  interface HTMLDrawBarPluginElement extends StencilComponents.DrawBarPlugin, HTMLStencilElement {}

  var HTMLDrawBarPluginElement: {
    prototype: HTMLDrawBarPluginElement;
    new (): HTMLDrawBarPluginElement;
  };
  interface HTMLElementTagNameMap {
    'draw-bar-plugin': HTMLDrawBarPluginElement;
  }
  interface ElementTagNameMap {
    'draw-bar-plugin': HTMLDrawBarPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'draw-bar-plugin': JSXElements.DrawBarPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface DrawBarPluginAttributes extends HTMLAttributes {
      'config'?: DrawBarConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DropDownPlugin {
      'dropDownData': any[];
      'dropDownTitle': string;
      'getControl': () => Control;
      'gisMap': L.Map;
    }
  }

  interface HTMLDropDownPluginElement extends StencilComponents.DropDownPlugin, HTMLStencilElement {}

  var HTMLDropDownPluginElement: {
    prototype: HTMLDropDownPluginElement;
    new (): HTMLDropDownPluginElement;
  };
  interface HTMLElementTagNameMap {
    'drop-down-plugin': HTMLDropDownPluginElement;
  }
  interface ElementTagNameMap {
    'drop-down-plugin': HTMLDropDownPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'drop-down-plugin': JSXElements.DropDownPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface DropDownPluginAttributes extends HTMLAttributes {
      'dropDownData'?: any[];
      'dropDownTitle'?: string;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FullScreenPlugin {
      'config': FullScreenConfig;
      'getControl': () => Control;
      'gisMap': L.Map;
    }
  }

  interface HTMLFullScreenPluginElement extends StencilComponents.FullScreenPlugin, HTMLStencilElement {}

  var HTMLFullScreenPluginElement: {
    prototype: HTMLFullScreenPluginElement;
    new (): HTMLFullScreenPluginElement;
  };
  interface HTMLElementTagNameMap {
    'full-screen-plugin': HTMLFullScreenPluginElement;
  }
  interface ElementTagNameMap {
    'full-screen-plugin': HTMLFullScreenPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'full-screen-plugin': JSXElements.FullScreenPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface FullScreenPluginAttributes extends HTMLAttributes {
      'config'?: FullScreenConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LayerManagerPlugin {
      'addingDrawableLayerToLayerController': (drawableLayer: FeatureGroup<any>) => void;
      'config': LayerManagerConfig;
      'getControl': () => Control;
      'getHtmlBtEl': () => HTMLElement;
      'gisMap': L.Map;
    }
  }

  interface HTMLLayerManagerPluginElement extends StencilComponents.LayerManagerPlugin, HTMLStencilElement {}

  var HTMLLayerManagerPluginElement: {
    prototype: HTMLLayerManagerPluginElement;
    new (): HTMLLayerManagerPluginElement;
  };
  interface HTMLElementTagNameMap {
    'layer-manager-plugin': HTMLLayerManagerPluginElement;
  }
  interface ElementTagNameMap {
    'layer-manager-plugin': HTMLLayerManagerPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'layer-manager-plugin': JSXElements.LayerManagerPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface LayerManagerPluginAttributes extends HTMLAttributes {
      'config'?: LayerManagerConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MeasurePlugin {
      'config': MeasureConfig;
      'getControl': () => Control;
      'gisMap': L.Map;
    }
  }

  interface HTMLMeasurePluginElement extends StencilComponents.MeasurePlugin, HTMLStencilElement {}

  var HTMLMeasurePluginElement: {
    prototype: HTMLMeasurePluginElement;
    new (): HTMLMeasurePluginElement;
  };
  interface HTMLElementTagNameMap {
    'measure-plugin': HTMLMeasurePluginElement;
  }
  interface ElementTagNameMap {
    'measure-plugin': HTMLMeasurePluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'measure-plugin': JSXElements.MeasurePluginAttributes;
    }
  }
  namespace JSXElements {
    export interface MeasurePluginAttributes extends HTMLAttributes {
      'config'?: MeasureConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SearchPlugin {
      'config': SearchConfig;
      'getControl': () => Control;
      'gisMap': L.Map;
    }
  }

  interface HTMLSearchPluginElement extends StencilComponents.SearchPlugin, HTMLStencilElement {}

  var HTMLSearchPluginElement: {
    prototype: HTMLSearchPluginElement;
    new (): HTMLSearchPluginElement;
  };
  interface HTMLElementTagNameMap {
    'search-plugin': HTMLSearchPluginElement;
  }
  interface ElementTagNameMap {
    'search-plugin': HTMLSearchPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'search-plugin': JSXElements.SearchPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface SearchPluginAttributes extends HTMLAttributes {
      'config'?: SearchConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ToolBar {
      'config': ToolbarConfig;
      'gisMap': L.Map;
    }
  }

  interface HTMLToolBarElement extends StencilComponents.ToolBar, HTMLStencilElement {}

  var HTMLToolBarElement: {
    prototype: HTMLToolBarElement;
    new (): HTMLToolBarElement;
  };
  interface HTMLElementTagNameMap {
    'tool-bar': HTMLToolBarElement;
  }
  interface ElementTagNameMap {
    'tool-bar': HTMLToolBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tool-bar': JSXElements.ToolBarAttributes;
    }
  }
  namespace JSXElements {
    export interface ToolBarAttributes extends HTMLAttributes {
      'config'?: ToolbarConfig;
      'gisMap'?: L.Map;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ZoomToExtentPlugin {
      'config': ZoomToExtentConfig;
      'getControl': () => Control;
      'gisMap': L.Map;
      'zoomToExtent': () => void;
    }
  }

  interface HTMLZoomToExtentPluginElement extends StencilComponents.ZoomToExtentPlugin, HTMLStencilElement {}

  var HTMLZoomToExtentPluginElement: {
    prototype: HTMLZoomToExtentPluginElement;
    new (): HTMLZoomToExtentPluginElement;
  };
  interface HTMLElementTagNameMap {
    'zoom-to-extent-plugin': HTMLZoomToExtentPluginElement;
  }
  interface ElementTagNameMap {
    'zoom-to-extent-plugin': HTMLZoomToExtentPluginElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'zoom-to-extent-plugin': JSXElements.ZoomToExtentPluginAttributes;
    }
  }
  namespace JSXElements {
    export interface ZoomToExtentPluginAttributes extends HTMLAttributes {
      'config'?: ZoomToExtentConfig;
      'gisMap'?: L.Map;
      'onZoomToExtentDoneEm'?: (event: CustomEvent<null>) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
